name: Release (MacOS)

on:
  workflow_call:
    inputs:
      discord_game_sdk_version:
        required: true
        type: string

jobs:
  macos:
    name: MacOS

    runs-on: macos-12
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.13

    steps:
    - name: Download source
      uses: actions/download-artifact@v3
      with:
        name: internal-source

    - name: Unpack source
      run: |
        tar -xf source.tar.gz --strip-components=1

    - name: Install Steamworks SDK
      shell: bash
      run: |
        curl -H "CF-Access-Client-Id: ${{ secrets.STEAMWORKS_SDK_ID }}" -H "CF-Access-Client-Secret: ${{ secrets.STEAMWORKS_SDK_SECRET }}" -O https://steamworks-sdk.openttd.org/steamworks_sdk_${{ vars.STEAMWORKS_SDK_VERSION }}.zip
        unzip -q steamworks_sdk_${{ vars.STEAMWORKS_SDK_VERSION }}.zip
        ./copy-sdk-files.sh

    - name: Install GCC problem matcher
      uses: ammaraskar/gcc-problem-matcher@master

    - name: Build arm64
      run: |
        mkdir build-arm64
        cd build-arm64

        echo "::group::CMake"
        cmake ${GITHUB_WORKSPACE} \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          # EOF
        echo "::endgroup::"

        echo "::group::Build"
        echo "Running on $(sysctl -n hw.logicalcpu) cores"
        cmake --build . -j $(sysctl -n hw.logicalcpu)
        echo "::endgroup::"

    - name: Build x64
      run: |
        mkdir build-x64
        cd build-x64

        echo "::group::CMake"
        cmake ${GITHUB_WORKSPACE} \
          -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install \
          -DAPPLE_UNIVERSAL_PACKAGE=1 \
          # EOF
        echo "::endgroup::"

        echo "::group::Build"
        echo "Running on $(sysctl -n hw.logicalcpu) cores"
        cmake --build . -j $(sysctl -n hw.logicalcpu)
        echo "::endgroup::"

    - name: Create bundles
      run: |
        # We first install both targets, as that changes the RPath to @loader_path.
        # Although this is also done after the universal binary is created, it only
        # removes the x64 path; not the arm64 path.
        (
          cd build-arm64
          make install
        )

        cd build-x64
        make install

        echo "::group::Create universal binary"
        # Combine the binaries from each build into a single file.
        lipo -create -output libsteam-social.dylib ../build-*/install/libsteam-social.dylib
        echo "::endgroup::"

        echo "::group::Run CPack"
        cpack
        echo "::endgroup::"

    - name: Store bundles
      uses: actions/upload-artifact@v3
      with:
        name: steam-social-macos-universal
        path: build-x64/bundles
        retention-days: 5
